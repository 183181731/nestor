#!/usr/bin/env node

var DEFAULT_URL = 'http://localhost:8080',
    nomnom = require('nomnom'),
    Nestor = require('../lib/nestor').Nestor,
    Service = require('../lib/service').Service,
    service = new Service(process.env.JENKINS_URL || DEFAULT_URL),
    nestor = new Nestor(service, function (err) {
        console.error(err.message);
    }),
    args, opts;

opts = {};

nomnom.scriptName('nestor');
nomnom.globalOpts(opts);
nomnom.command('dashboard').callback(function (args) {
    nestor.dashboard(function (err, result) {
        if (err) {
            console.error(err.message);
        } else if (result.length === 0) {
            console.log('Jobless Jenkins');
        } else {
            result.forEach(function (job) {
                console.log(job.status + '\t' + job.name);
            });
        }
    });
});
nomnom.command('job').callback(function (args) {
    nestor.job(args._[1], function (err, result) {
        if (err) {
            console.error(err.message);
        } else {
            console.log('Status: ' + result.status);
            result.reports.forEach(function (report) {
                console.log(report);
            });
        }
    });
});
nomnom.command('build').callback(function (args) {
    nestor.build(args._[1], args._[2], function (err, result) {
        if (err) {
            console.error(err.message);
        } else {
            console.log('Job was started successfully');
        }
    });
});
nomnom.command('queue').callback(function (args) {
    nestor.queue(function (err, result) {
        if (err) {
            console.error(err.message);
        } else {
            if (result.length === 0) {
                console.log('Queue is empty');
            } else {
                result.forEach(function (build) {
                    console.log(build);
                });
            }
        }
    });
});
nomnom.command('executor').callback(function (args) {
    nestor.executor(function (err, result) {
        if (err) {
            console.error(err.message);
        } else {
            for (computer in result) {
                if (result.hasOwnProperty(computer)) {
                    console.log('* ' + computer);
                    result[computer].forEach(function (executor) {
                        if (executor.idle) {
                            console.log('idle');
                        } else {
                            console.log(executor.progress + '%\t' + executor.name);
                        }
                    });
                }
            }
        }
    });
});
nomnom.command('version').callback(function (args) {
    nestor.version(function (err, result) {
        if (err) {
            console.error(err.message);
        } else {
            console.log(result);
        }
    });
});
nomnom.parseArgs();